import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../domain/entities/account.dart';
import '../bloc/accounts_bloc.dart';
import '../bloc/accounts_event.dart';
import '../bloc/accounts_state.dart';

class CreateAccountForm extends StatefulWidget {
  final VoidCallback? onAccountCreated;

  const CreateAccountForm({Key? key, this.onAccountCreated}) : super(key: key);

  @override
  State<CreateAccountForm> createState() => _CreateAccountFormState();
}

class _CreateAccountFormState extends State<CreateAccountForm> {
  final _formKey = GlobalKey<FormState>();
  final _scrollController = ScrollController();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();
  final _companyController = TextEditingController();
  final _address1Controller = TextEditingController();
  final _address2Controller = TextEditingController();
  final _cityController = TextEditingController();
  final _stateController = TextEditingController();
  final _countryController = TextEditingController();
  final _notesController = TextEditingController();

  // GlobalKeys for required fields to enable scrolling to them
  final _nameFieldKey = GlobalKey();
  final _emailFieldKey = GlobalKey();

  // FocusNodes for keyboard navigation
  final _nameFocusNode = FocusNode();
  final _emailFocusNode = FocusNode();
  final _phoneFocusNode = FocusNode();
  final _companyFocusNode = FocusNode();
  final _address1FocusNode = FocusNode();
  final _address2FocusNode = FocusNode();
  final _cityFocusNode = FocusNode();
  final _stateFocusNode = FocusNode();
  final _notesFocusNode = FocusNode();

  String _selectedCurrency = 'USD';
  String _selectedTimeZone = 'GMT';
  String _selectedCountry = 'US';

  final List<String> _currencies = ['USD', 'EUR', 'GBP', 'ETB', 'KES', 'NGN'];
  final List<String> _timeZones = ['GMT', 'UTC', 'EST', 'PST', 'CET', 'EAT'];
  final List<String> _countries = ['US', 'ET', 'KE', 'NG', 'GB', 'DE', 'FR'];

  @override
  void dispose() {
    _scrollController.dispose();
    _nameController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _companyController.dispose();
    _address1Controller.dispose();
    _address2Controller.dispose();
    _cityController.dispose();
    _stateController.dispose();
    _countryController.dispose();
    _notesController.dispose();

    // Dispose FocusNodes
    _nameFocusNode.dispose();
    _emailFocusNode.dispose();
    _phoneFocusNode.dispose();
    _companyFocusNode.dispose();
    _address1FocusNode.dispose();
    _address2FocusNode.dispose();
    _cityFocusNode.dispose();
    _stateFocusNode.dispose();
    _notesFocusNode.dispose();

    super.dispose();
  }

  void _submitForm() {
    if (!_formKey.currentState!.validate()) {
      // Find the first invalid field and scroll to it
      _scrollToFirstInvalidField();
      return;
    }

    final account = Account(
      accountId: '', // Will be generated by the server
      name: _nameController.text.trim(),
      firstNameLength: null,
      externalKey: '', // Will be generated by the server
      email: _emailController.text.trim(),
      billCycleDayLocal: 0, // Default value
      currency: _selectedCurrency,
      parentAccountId: null,
      isPaymentDelegatedToParent: false,
      paymentMethodId: null,
      referenceTime: DateTime.now(),
      timeZone: _selectedTimeZone,
      address1: _address1Controller.text.trim().isEmpty
          ? null
          : _address1Controller.text.trim(),
      address2: _address2Controller.text.trim().isEmpty
          ? null
          : _address2Controller.text.trim(),
      postalCode: null,
      company: _companyController.text.trim().isEmpty
          ? null
          : _companyController.text.trim(),
      city: _cityController.text.trim().isEmpty
          ? null
          : _cityController.text.trim(),
      state: _stateController.text.trim().isEmpty
          ? null
          : _stateController.text.trim(),
      country: _selectedCountry,
      locale: null,
      phone: _phoneController.text.trim().isEmpty
          ? null
          : _phoneController.text.trim(),
      notes: _notesController.text.trim().isEmpty
          ? null
          : _notesController.text.trim(),
      isMigrated: null,
      accountBalance: null,
      accountCBA: null,
      auditLogs: [],
    );

    context.read<AccountsBloc>().add(CreateAccount(account));
  }

  void _scrollToFirstInvalidField() {
    // Check required fields in order and scroll to the first empty one
    if (_nameController.text.trim().isEmpty) {
      _scrollToField(_nameFieldKey);
    } else if (_emailController.text.trim().isEmpty) {
      _scrollToField(_emailFieldKey);
    }
  }

  void _scrollToField(GlobalKey fieldKey) {
    final RenderBox? renderBox =
        fieldKey.currentContext?.findRenderObject() as RenderBox?;
    if (renderBox != null) {
      final position = renderBox.localToGlobal(Offset.zero);
      final scrollOffset =
          _scrollController.offset +
          position.dy -
          100; // 100px padding from top

      _scrollController.animateTo(
        scrollOffset.clamp(0.0, _scrollController.position.maxScrollExtent),
        duration: const Duration(milliseconds: 500),
        curve: Curves.easeInOut,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return BlocListener<AccountsBloc, AccountsState>(
      listener: (context, state) {
        if (state is AccountCreated) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(
                    Icons.check_circle_outline,
                    color: Colors.white,
                    size: 20,
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      'Account "${state.account.name}" created successfully!',
                    ),
                  ),
                ],
              ),
              backgroundColor: Colors.green,
              behavior: SnackBarBehavior.floating,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          );
          widget.onAccountCreated?.call();
          Navigator.of(context).pop();
        } else if (state is AccountCreationFailure) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.error_outline, color: Colors.white, size: 20),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text('Failed to create account: ${state.message}'),
                  ),
                ],
              ),
              backgroundColor: Colors.red,
              behavior: SnackBarBehavior.floating,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          );
        }
      },
      child: Scaffold(
        backgroundColor: colorScheme.surface,
        appBar: AppBar(
          elevation: 0,
          backgroundColor: Colors.transparent,
          surfaceTintColor: Colors.transparent,
          leading: IconButton(
            onPressed: () => Navigator.of(context).pop(),
            icon: Icon(
              Icons.arrow_back_ios_rounded,
              color: colorScheme.onSurface,
            ),
          ),
          title: Text(
            'Create New Account',
            style: theme.textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.w700,
              color: colorScheme.onSurface,
            ),
          ),
          centerTitle: false,
        ),
        body: BlocBuilder<AccountsBloc, AccountsState>(
          builder: (context, state) {
            return Form(
              key: _formKey,
              child: SingleChildScrollView(
                controller: _scrollController,
                padding: const EdgeInsets.all(24.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Header Card
                    _buildHeaderCard(theme, colorScheme),
                    const SizedBox(height: 24),

                    // Basic Information Card
                    _buildSectionCard(
                      theme: theme,
                      colorScheme: colorScheme,
                      title: 'Basic Information',
                      icon: Icons.person_outline_rounded,
                      children: [
                        _buildModernTextField(
                          theme: theme,
                          colorScheme: colorScheme,
                          controller: _nameController,
                          label: 'Account Name',
                          hint: 'Enter account name',
                          icon: Icons.badge_outlined,
                          isRequired: true,
                          key: _nameFieldKey,
                          focusNode: _nameFocusNode,
                          textInputAction: TextInputAction.next,
                          onFieldSubmitted: () =>
                              _emailFocusNode.requestFocus(),
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Account name is required';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          theme: theme,
                          colorScheme: colorScheme,
                          controller: _emailController,
                          label: 'Email Address',
                          hint: 'Enter email address',
                          icon: Icons.email_outlined,
                          keyboardType: TextInputType.emailAddress,
                          isRequired: true,
                          key: _emailFieldKey,
                          focusNode: _emailFocusNode,
                          textInputAction: TextInputAction.next,
                          onFieldSubmitted: () =>
                              _phoneFocusNode.requestFocus(),
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Email is required';
                            }
                            if (!RegExp(
                              r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$',
                            ).hasMatch(value)) {
                              return 'Please enter a valid email';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          theme: theme,
                          colorScheme: colorScheme,
                          controller: _phoneController,
                          label: 'Phone Number',
                          hint: 'Enter phone number',
                          icon: Icons.phone_outlined,
                          keyboardType: TextInputType.phone,
                          focusNode: _phoneFocusNode,
                          textInputAction: TextInputAction.next,
                          onFieldSubmitted: () =>
                              _companyFocusNode.requestFocus(),
                        ),

                        const SizedBox(height: 20),
                        _buildModernTextField(
                          theme: theme,
                          colorScheme: colorScheme,
                          controller: _companyController,
                          label: 'Company',
                          hint: 'Enter company name',
                          icon: Icons.business_outlined,
                          focusNode: _companyFocusNode,
                          textInputAction: TextInputAction.next,
                          onFieldSubmitted: () =>
                              _address1FocusNode.requestFocus(),
                        ),
                      ],
                    ),
                    const SizedBox(height: 24),

                    // Location Information Card
                    _buildSectionCard(
                      theme: theme,
                      colorScheme: colorScheme,
                      title: 'Location Information',
                      icon: Icons.location_on_outlined,
                      children: [
                        _buildModernTextField(
                          theme: theme,
                          colorScheme: colorScheme,
                          controller: _address1Controller,
                          label: 'Address Line 1',
                          hint: 'Enter street address',
                          icon: Icons.home_outlined,
                          focusNode: _address1FocusNode,
                          textInputAction: TextInputAction.next,
                          onFieldSubmitted: () =>
                              _address2FocusNode.requestFocus(),
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          theme: theme,
                          colorScheme: colorScheme,
                          controller: _address2Controller,
                          label: 'Address Line 2',
                          hint: 'Apartment, suite, etc. (optional)',
                          icon: Icons.home_work_outlined,
                          focusNode: _address2FocusNode,
                          textInputAction: TextInputAction.next,
                          onFieldSubmitted: () => _cityFocusNode.requestFocus(),
                        ),
                        const SizedBox(height: 20),

                        _buildModernTextField(
                          theme: theme,
                          colorScheme: colorScheme,
                          controller: _cityController,
                          label: 'City',
                          hint: 'Enter city',
                          icon: Icons.location_city_outlined,
                          focusNode: _cityFocusNode,
                          textInputAction: TextInputAction.next,
                          onFieldSubmitted: () =>
                              _stateFocusNode.requestFocus(),
                        ),

                        const SizedBox(height: 20),
                        _buildModernTextField(
                          theme: theme,
                          colorScheme: colorScheme,
                          controller: _stateController,
                          label: 'State',
                          hint: 'State/Province',
                          icon: Icons.map_outlined,
                          focusNode: _stateFocusNode,
                          textInputAction: TextInputAction.done,
                        ),

                        const SizedBox(height: 20),
                        _buildModernDropdown(
                          theme: theme,
                          colorScheme: colorScheme,
                          label: 'Country',
                          value: _selectedCountry,
                          items: _countries,
                          icon: Icons.public_outlined,
                          onChanged: (value) {
                            setState(() {
                              _selectedCountry = value!;
                            });
                          },
                        ),
                      ],
                    ),
                    const SizedBox(height: 24),

                    // Account Settings Card
                    _buildSectionCard(
                      theme: theme,
                      colorScheme: colorScheme,
                      title: 'Account Settings',
                      icon: Icons.settings_outlined,
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: _buildModernDropdown(
                                theme: theme,
                                colorScheme: colorScheme,
                                label: 'Currency',
                                value: _selectedCurrency,
                                items: _currencies,
                                icon: Icons.attach_money_outlined,
                                onChanged: (value) {
                                  setState(() {
                                    _selectedCurrency = value!;
                                  });
                                },
                              ),
                            ),
                            const SizedBox(width: 16),
                            Expanded(
                              child: _buildModernDropdown(
                                theme: theme,
                                colorScheme: colorScheme,
                                label: 'Time Zone',
                                value: _selectedTimeZone,
                                items: _timeZones,
                                icon: Icons.schedule_outlined,
                                onChanged: (value) {
                                  setState(() {
                                    _selectedTimeZone = value!;
                                  });
                                },
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const SizedBox(height: 24),

                    // Additional Information Card
                    _buildSectionCard(
                      theme: theme,
                      colorScheme: colorScheme,
                      title: 'Additional Information',
                      icon: Icons.note_outlined,
                      children: [
                        _buildModernTextField(
                          theme: theme,
                          colorScheme: colorScheme,
                          controller: _notesController,
                          label: 'Notes',
                          hint: 'Add any additional notes about this account',
                          icon: Icons.edit_note_outlined,
                          maxLines: 4,
                          focusNode: _notesFocusNode,
                          textInputAction: TextInputAction.done,
                        ),
                      ],
                    ),
                    const SizedBox(height: 32),

                    // Action Buttons
                    _buildActionButtons(theme, colorScheme, state),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  Widget _buildHeaderCard(ThemeData theme, ColorScheme colorScheme) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            colorScheme.primary.withOpacity(0.1),
            colorScheme.primary.withOpacity(0.05),
          ],
        ),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: colorScheme.primary.withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: colorScheme.primary.withOpacity(0.1),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Icon(
              Icons.person_add_alt_1_rounded,
              color: colorScheme.primary,
              size: 32,
            ),
          ),
          const SizedBox(width: 20),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Create New Account',
                  style: theme.textTheme.headlineSmall?.copyWith(
                    fontWeight: FontWeight.w700,
                    color: colorScheme.onSurface,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  'Fill in the details below to create a new account for your billing system.',
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: colorScheme.onSurface.withOpacity(0.7),
                    height: 1.4,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionCard({
    required ThemeData theme,
    required ColorScheme colorScheme,
    required String title,
    required IconData icon,
    required List<Widget> children,
  }) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: colorScheme.surface,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: colorScheme.outline.withOpacity(0.1),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: colorScheme.shadow.withOpacity(0.05),
            blurRadius: 20,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: colorScheme.primary.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(icon, color: colorScheme.primary, size: 24),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Text(
                  title,
                  style: theme.textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.w600,
                    color: colorScheme.onSurface,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 24),
          ...children,
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required ThemeData theme,
    required ColorScheme colorScheme,
    required TextEditingController controller,
    required String label,
    required String hint,
    required IconData icon,
    TextInputType? keyboardType,
    int maxLines = 1,
    bool isRequired = false,
    String? Function(String?)? validator,
    Key? key,
    FocusNode? focusNode,
    TextInputAction? textInputAction,
    VoidCallback? onFieldSubmitted,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(icon, size: 18, color: colorScheme.primary.withOpacity(0.7)),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                label,
                style: theme.textTheme.labelLarge?.copyWith(
                  fontWeight: FontWeight.w600,
                  color: colorScheme.onSurface,
                ),
              ),
            ),
            if (isRequired) ...[
              const SizedBox(width: 4),
              Text(
                '*',
                style: TextStyle(
                  color: colorScheme.error,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ],
        ),
        const SizedBox(height: 8),
        Container(
          key: key,
          child: TextFormField(
            controller: controller,
            focusNode: focusNode,
            keyboardType: keyboardType,
            textInputAction: textInputAction,
            onFieldSubmitted: onFieldSubmitted != null
                ? (_) => onFieldSubmitted()
                : null,
            maxLines: maxLines,
            validator: validator,
            style: theme.textTheme.bodyLarge,
            decoration: InputDecoration(
              hintText: hint,
              hintStyle: theme.textTheme.bodyLarge?.copyWith(
                color: colorScheme.onSurface.withOpacity(0.5),
              ),
              filled: true,
              fillColor: colorScheme.surfaceContainerHighest.withOpacity(0.3),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide(
                  color: colorScheme.outline.withOpacity(0.2),
                  width: 1,
                ),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide(
                  color: colorScheme.outline.withOpacity(0.2),
                  width: 1,
                ),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide(color: colorScheme.primary, width: 2),
              ),
              errorBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide(color: colorScheme.error, width: 1),
              ),
              focusedErrorBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide(color: colorScheme.error, width: 2),
              ),
              contentPadding: const EdgeInsets.symmetric(
                horizontal: 20,
                vertical: 16,
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildModernDropdown({
    required ThemeData theme,
    required ColorScheme colorScheme,
    required String label,
    required String value,
    required List<String> items,
    required IconData icon,
    required ValueChanged<String?> onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(icon, size: 18, color: colorScheme.primary.withOpacity(0.7)),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                label,
                style: theme.textTheme.labelLarge?.copyWith(
                  fontWeight: FontWeight.w600,
                  color: colorScheme.onSurface,
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        DropdownButtonFormField<String>(
          value: value,
          decoration: InputDecoration(
            filled: true,
            fillColor: colorScheme.surfaceContainerHighest.withOpacity(0.3),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(16),
              borderSide: BorderSide(
                color: colorScheme.outline.withOpacity(0.2),
                width: 1,
              ),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(16),
              borderSide: BorderSide(
                color: colorScheme.outline.withOpacity(0.2),
                width: 1,
              ),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(16),
              borderSide: BorderSide(color: colorScheme.primary, width: 2),
            ),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 20,
              vertical: 16,
            ),
          ),
          dropdownColor: colorScheme.surface,
          style: theme.textTheme.bodyLarge,
          items: items.map((item) {
            return DropdownMenuItem<String>(
              value: item,
              child: Text(
                item,
                style: theme.textTheme.bodyLarge?.copyWith(
                  color: colorScheme.onSurface,
                ),
              ),
            );
          }).toList(),
          onChanged: onChanged,
        ),
      ],
    );
  }

  Widget _buildActionButtons(
    ThemeData theme,
    ColorScheme colorScheme,
    AccountsState state,
  ) {
    final isLoading = state is AccountCreating;

    return Row(
      children: [
        Expanded(
          child: OutlinedButton(
            onPressed: isLoading ? null : () => Navigator.of(context).pop(),
            style: OutlinedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              side: BorderSide(
                color: colorScheme.outline.withOpacity(0.3),
                width: 1,
              ),
            ),
            child: Text(
              'Cancel',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
                color: colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          flex: 2,
          child: ElevatedButton(
            onPressed: isLoading ? null : _submitForm,
            style: ElevatedButton.styleFrom(
              backgroundColor: colorScheme.primary,
              foregroundColor: colorScheme.onPrimary,
              padding: const EdgeInsets.symmetric(vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: 2,
              shadowColor: colorScheme.primary.withOpacity(0.3),
            ),
            child: isLoading
                ? SizedBox(
                    height: 20,
                    width: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(
                        colorScheme.onPrimary,
                      ),
                    ),
                  )
                : Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.add_rounded, size: 20),
                      const SizedBox(width: 8),
                      Text(
                        'Create Account',
                        style: theme.textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.w600,
                          color: colorScheme.onPrimary,
                        ),
                      ),
                    ],
                  ),
          ),
        ),
      ],
    );
  }
}
